from bot.database.storage import DataStorage
from bot.config import CANDIDATE_STATUSES

class AnalyticsHelper:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    
    @staticmethod
    def calculate_statistics():
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º."""
        candidates = DataStorage.get_candidates()
        
        if not candidates:
            return None
            
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        total_candidates = len(candidates)
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_count = {}
        for status in CANDIDATE_STATUSES:
            status_count[status] = sum(1 for c in candidates if c['status'] == status)
            
        # –°—á–∏—Ç–∞–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–∞–∑–∞
        rejection_count = {
            '–ö–æ–º–ø–∞–Ω–∏—è': sum(1 for c in candidates if c.get('rejection_reason') and c['rejection_reason']['type'] == '–ö–æ–º–ø–∞–Ω–∏—è'),
            '–ö–∞–Ω–¥–∏–¥–∞—Ç': sum(1 for c in candidates if c.get('rejection_reason') and c['rejection_reason']['type'] == '–ö–∞–Ω–¥–∏–¥–∞—Ç')
        }
        
        return {
            'total': total_candidates,
            'status_count': status_count,
            'rejection_count': rejection_count
        }
    
    @staticmethod
    def generate_analytics_text():
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        stats = AnalyticsHelper.calculate_statistics()
        
        if not stats:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."
            
        total_candidates = stats['total']
        status_count = stats['status_count']
        rejection_count = stats['rejection_count']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_text = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º:\n\n"
        analytics_text += f"–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {total_candidates}\n\n"
        
        analytics_text += "–°—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n"
        for status, count in status_count.items():
            if count > 0:
                percentage = round((count / total_candidates) * 100, 1)
                analytics_text += f"- {status}: {count} ({percentage}%)\n"
        
        analytics_text += "\n–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:\n"
        for reason_type, count in rejection_count.items():
            if count > 0:
                percentage = round((count / total_candidates) * 100, 1)
                analytics_text += f"- {reason_type}: {count} ({percentage}%)\n"
                
        return analytics_text
    
    @staticmethod
    def export_analytics():
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        return DataStorage.export_analytics_to_csv() 