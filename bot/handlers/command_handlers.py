from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import os
import traceback

from bot.config import (
    STATUS_CALLBACK, REASON_CALLBACK, 
    CANDIDATE_STATUSES, COMPANY_REJECTION_REASONS, CANDIDATE_REJECTION_REASONS,
    logger, COMPANY_NAME
)
from bot.database.storage import DataStorage
from bot.utils.analytics import AnalyticsHelper

class CommandHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ
        if update.callback_query:
            await update.callback_query.answer()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! –Ø HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ '{COMPANY_NAME}' –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n" \
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ\n" \
            "/vacancies - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π\n" \
            "/dialog - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º\n" \
            "/status - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n" \
            "/rejection - –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞\n" \
            "/analytics - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        logo_path = os.path.join('images', '—Ä–æ–¥–∞–Ω.jpg')
            
        if update.callback_query:
            # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if os.path.exists(logo_path):
                # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –Ω–µ–ª—å–∑—è
                await update.callback_query.message.reply_photo(
                    photo=open(logo_path, 'rb'),
                    caption=greeting_text
                )
                # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.delete()
            else:
                # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.callback_query.message.reply_text(greeting_text)
                # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.delete()
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if os.path.exists(logo_path):
                try:
                    with open(logo_path, 'rb') as photo_file:
                        await update.message.reply_photo(
                            photo=photo_file,
                            caption=greeting_text
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –∏–∑ {logo_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
                    await update.message.reply_text(greeting_text)
            else:
                # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.error(f"–§–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {logo_path}")
                await update.message.reply_text(greeting_text)
    
    @staticmethod
    async def show_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π."""
        vacancies = DataStorage.get_vacancies()
        
        if not vacancies:
            await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
            return
        
        vacancy_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
        for vacancy in vacancies:
            vacancy_text += f"* {vacancy['title']}\n"
            vacancy_text += f"üíº {vacancy['description']}\n"
            vacancy_text += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}\n\n"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
        keyboard = [
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
            
        await update.message.reply_text(vacancy_text, reply_markup=reply_markup)
    
    @staticmethod
    async def set_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        candidates = DataStorage.get_candidates()
        
        if not candidates:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö.")
            return
            
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:")
        
        keyboard = []
        for i, candidate in enumerate(candidates):
            keyboard.append([
                InlineKeyboardButton(
                    f"üë§ {candidate['name']} - {candidate['vacancy']}",
                    callback_data=f"candidate_{i}_status"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_candidates")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")])
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:", reply_markup=reply_markup)
    
    @staticmethod
    async def set_rejection_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞."""
        candidates = DataStorage.get_candidates()
        
        if not candidates:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö.")
            return
            
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:")
        
        keyboard = []
        for i, candidate in enumerate(candidates):
            keyboard.append([
                InlineKeyboardButton(
                    f"üë§ {candidate['name']} - {candidate['vacancy']}",
                    callback_data=f"candidate_{i}_reason"
                )
            ])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")])
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:", reply_markup=reply_markup)
    
    @staticmethod
    async def show_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º."""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_text = AnalyticsHelper.generate_analytics_text()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if analytics_text == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.":
            await update.message.reply_text(analytics_text)
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
        export_success = AnalyticsHelper.export_analytics()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤–æ–π –∏–∫–æ–Ω–∫–æ–π
        keyboard = [
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.message.reply_text(analytics_text, reply_markup=reply_markup)
        
        if export_success:
            await update.message.reply_text(
                "üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª analytics.csv"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."
            )
    
    @staticmethod
    async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data.split('_')
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ callback: {query.data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è /start
            if len(data) < 2:  
                if data[0] == "/start":
                    return await CommandHandlers.start(update, context)
                return
                
            # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if data[0] == "clear" and len(data) > 1 and data[1] == "candidates":
                await CommandHandlers.handle_clear_candidates(query)
                return
                
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if data[0] == "confirm" and len(data) > 1 and data[1] == "clear" and len(data) > 2 and data[2] == "candidates":
                await CommandHandlers.handle_confirm_clear_candidates(query)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π
            if data[0] == "back":
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {query.data}")
                await CommandHandlers.handle_back_button(query, data, context)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            if data[0] == "candidate":
                await CommandHandlers.handle_candidate_selection(query, data, context)
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            elif data[0] == "set" and data[1] == "status" and len(data) >= 4:
                await CommandHandlers.handle_status_setting(query, data, context)
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
            elif data[0] == "reason" and data[1] == "type":
                await CommandHandlers.handle_reason_type_selection(query, data, context)
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
            elif data[0] == "set" and data[1] == "reason" and len(data) >= 5:
                await CommandHandlers.handle_reason_setting(query, data, context)
                return
                
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                
        except Exception as e:
            error_details = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}\n{error_details}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
    
    @staticmethod
    async def handle_back_button(query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥'"""
        try:
            if data[1] == "to" and len(data) > 2 and data[2] == "candidates":
                if len(data) > 3:
                    action = data[3]  # status, reason –∏–ª–∏ list
                    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥', –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                    
                    candidates = DataStorage.get_candidates()
                    
                    if action == "list":
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                        keyboard = [
                            [InlineKeyboardButton("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="back_to_candidates_status")],
                            [InlineKeyboardButton("‚ùå –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞", callback_data="back_to_candidates_reason")],
                            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
                        
                    elif action == "status":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                        keyboard = []
                        for i, candidate in enumerate(candidates):
                            keyboard.append([
                                InlineKeyboardButton(
                                    f"üë§ {candidate['name']} - {candidate['vacancy']}",
                                    callback_data=f"candidate_{i}_status"
                                )
                            ])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
                        keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_candidates")])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")])
                        
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=reply_markup)
                        
                    elif action == "reason":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
                        keyboard = []
                        for i, candidate in enumerate(candidates):
                            keyboard.append([
                                InlineKeyboardButton(
                                    f"üë§ {candidate['name']} - {candidate['vacancy']}",
                                    callback_data=f"candidate_{i}_reason"
                                )
                            ])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")])
                        
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
    
    @staticmethod
    async def handle_candidate_selection(query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        try:
            candidate_idx = int(data[1])
            action_type = data[2]  # status –∏–ª–∏ reason
            
            candidates = DataStorage.get_candidates()
            if candidate_idx >= len(candidates):
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            candidate = candidates[candidate_idx]
            context.user_data['current_candidate_idx'] = candidate_idx
            
            if action_type == "status":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                keyboard = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —Å—Ç–∞—Ç—É—Å–∞–º
                status_emojis = ["üìû", "üìù", "‚úÖ", "‚ùå", "üïí"]
                
                for i, status in enumerate(CANDIDATE_STATUSES):
                    emoji = status_emojis[i] if i < len(status_emojis) else "üìå"
                    keyboard.append([InlineKeyboardButton(f"{emoji} {status}", callback_data=f"set_status_{candidate_idx}_{i}")])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_candidates_status")])
                    
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate['name']}:",
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {candidate_idx}")
            
            elif action_type == "reason":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞
                keyboard = [
                    [InlineKeyboardButton("üè¢ –û—Ç–∫–∞–∑ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data=f"reason_type_{candidate_idx}_company")],
                    [InlineKeyboardButton("üë®‚Äçüíº –û—Ç–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", callback_data=f"reason_type_{candidate_idx}_candidate")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_candidates_reason")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate['name']}:",
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–∏–ø—ã –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {candidate_idx}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @staticmethod
    async def handle_status_setting(query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            candidate_idx = int(data[2])
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã CANDIDATE_STATUSES
            status_index = int(data[3])
            logger.info(f"–í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞: –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞={candidate_idx}, –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç—É—Å–∞={status_index}")
            
            if 0 <= status_index < len(CANDIDATE_STATUSES):
                status = CANDIDATE_STATUSES[status_index]
            else:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å (–∏–Ω–¥–µ–∫—Å {status_index}).")
                return
            
            candidates = DataStorage.get_candidates()
            if candidate_idx < len(candidates):
                candidate = candidates[candidate_idx]
                candidate['status'] = status
                DataStorage.update_candidate(candidate_idx, candidate)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="back_to_candidates_status")],
                    [InlineKeyboardButton("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"candidate_{candidate_idx}_status")],
                    [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate['name']} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º {candidate_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @staticmethod
    async def handle_reason_type_selection(query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
        try:
            candidate_idx = int(data[2])
            reason_type = data[3]  # company –∏–ª–∏ candidate
            
            candidates = DataStorage.get_candidates()
            if candidate_idx >= len(candidates):
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            keyboard = []
            reasons_list = COMPANY_REJECTION_REASONS if reason_type == "company" else CANDIDATE_REJECTION_REASONS
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–∞–∑–∞
            company_reason_emojis = ["üí∞", "üë®‚Äçüíº", "üìä", "üè¢", "‚è±Ô∏è"]
            candidate_reason_emojis = ["üí∞", "üìç", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "üè¢", "üïí"]
            
            reason_emojis = company_reason_emojis if reason_type == "company" else candidate_reason_emojis
            
            for i, reason in enumerate(reasons_list):
                emoji = reason_emojis[i] if i < len(reason_emojis) else "‚ùå"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{emoji} {reason}", 
                        callback_data=f"set_reason_{candidate_idx}_{reason_type}_{i}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"candidate_{candidate_idx}_reason")])
                
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidates[candidate_idx]['name']}:",
                reply_markup=reply_markup
            )
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @staticmethod
    async def handle_reason_setting(query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
        try:
            candidate_idx = int(data[2])
            reason_type = data[3]  # company –∏–ª–∏ candidate
            reason_idx = int(data[4])
            
            candidates = DataStorage.get_candidates()
            if candidate_idx >= len(candidates):
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            reasons_list = COMPANY_REJECTION_REASONS if reason_type == "company" else CANDIDATE_REJECTION_REASONS
            if reason_idx >= len(reasons_list):
                await query.edit_message_text("–û—à–∏–±–∫–∞: –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            reason = reasons_list[reason_idx]
            
            candidate = candidates[candidate_idx]
            candidate['rejection_reason'] = {
                'type': '–ö–æ–º–ø–∞–Ω–∏—è' if reason_type == "company" else '–ö–∞–Ω–¥–∏–¥–∞—Ç',
                'reason': reason
            }
            DataStorage.update_candidate(candidate_idx, candidate)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="back_to_candidates_reason")],
                [InlineKeyboardButton("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–∏—á–∏–Ω—É", callback_data=f"candidate_{candidate_idx}_reason")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate['name']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {reason}",
                reply_markup=reply_markup
            )
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @staticmethod
    async def handle_clear_candidates(query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="confirm_clear_candidates")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_candidates_status")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @staticmethod
    async def handle_confirm_clear_candidates(query):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            DataStorage.clear_candidates()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.",
                reply_markup=reply_markup
            )
            logger.info("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.") 