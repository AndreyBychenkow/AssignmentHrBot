from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from bot.config import (
    INTRO, RESEARCH, PRESENTATION, INVITATION, CONFIRMATION,
    COMPANY_NAME, logger
)
from bot.scripts.dialog import DIALOG_SCRIPTS
from bot.database.storage import DataStorage

class DialogHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º."""
    
    @staticmethod
    async def start_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º."""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
            for key in list(context.user_data.keys()):
                if key.startswith(('candidate_', 'dialog_', 'interest', 'invitation', 'confirmation', 'preferred_time', 'vacancy_id')):
                    del context.user_data[key]
            
            intro_message = DIALOG_SCRIPTS[INTRO].format(company=COMPANY_NAME)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="intro_yes")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="intro_no")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(intro_message, reply_markup=reply_markup)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
            context.user_data['dialog_start_time'] = datetime.now().isoformat()
            context.user_data['vacancy_id'] = 0  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º, chat_id: {update.effective_chat.id}")
            return INTRO
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            return ConversationHandler.END

    @staticmethod
    async def handle_intro_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "intro_yes":
                await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è?")
                return RESEARCH
            elif query.data == "intro_no":
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è", callback_data="intro_called_back")],
                    [InlineKeyboardButton("‚ùå –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ", callback_data="intro_still_no")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–ü–æ–Ω—è–ª –í–∞—Å, –∞ –∫–æ–≥–¥–∞ —è –º–æ–≥—É —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", 
                    reply_markup=reply_markup
                )
                return INTRO
            elif query.data == "intro_called_back":
                await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—à–µ –∏–º—è?")
                return RESEARCH
            elif query.data == "intro_still_no":
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–ü–æ–Ω—è–ª, —Ç–æ–≥–¥–∞ —Ö–æ—á—É –ø–æ–∂–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    reply_markup=reply_markup
                )
                return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")
            if update.callback_query:
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dialog.",
                    reply_markup=reply_markup
                )
            return ConversationHandler.END

    @staticmethod
    async def handle_research(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        context.user_data['candidate_name'] = update.message.text
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        research_message = DIALOG_SCRIPTS[RESEARCH].format(name=context.user_data['candidate_name'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É –¥–∏–∞–ª–æ–≥–∞
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_intro")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(research_message, reply_markup=reply_markup)
        return PRESENTATION

    @staticmethod
    async def handle_presentation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        context.user_data['preferences'] = update.message.text
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        vacancies = DataStorage.get_vacancies()
        vacancy_id = context.user_data.get('vacancy_id', 0)
        if 0 <= vacancy_id < len(vacancies):
            vacancy = vacancies[vacancy_id]
        else:
            vacancy = vacancies[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        presentation_message = DIALOG_SCRIPTS[PRESENTATION].format(
            name=context.user_data['candidate_name']
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="presentation_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="presentation_no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_research")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(presentation_message, reply_markup=reply_markup)
        return INVITATION

    @staticmethod
    async def handle_presentation_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "presentation_yes":
                # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
                invitation_message = DIALOG_SCRIPTS[INVITATION].format(
                    name=context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="invitation_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", callback_data="invitation_no")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_presentation")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(invitation_message, reply_markup=reply_markup)
                context.user_data['interest'] = "–î–∞, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω"
                return INVITATION
            else:
                # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è, {name}! "
                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏. –ú–æ–±. —Ç–µ–ª.: 8 920 902 2901 (Telegram, WhatsApp)",
                    reply_markup=reply_markup
                )
                context.user_data['interest'] = "–ù–µ—Ç, –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                DialogHandlers.save_candidate_data(context)
                return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: {e}")
            if update.callback_query:
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dialog.",
                    reply_markup=reply_markup
                )
            return ConversationHandler.END

    @staticmethod
    async def handle_invitation_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "invitation_yes":
                # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
                confirmation_message = DIALOG_SCRIPTS[CONFIRMATION]
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirmation_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirmation_no")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_invitation")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(confirmation_message, reply_markup=reply_markup)
                context.user_data['invitation_accepted'] = "–î–∞"
                return CONFIRMATION
            else:
                # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"{name}, —Ç–æ–≥–¥–∞ –æ–±–¥—É–º–∞–π—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º.  "
                    "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: –ú–æ–±.–¢–µ–ª.: 8 920 902 2901 (Telegram, WhatsApp). –ë—É–¥–µ–º –∂–¥–∞—Ç—å –æ—Ç –í–∞—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.",
                    reply_markup=reply_markup
                )
                context.user_data['invitation_accepted'] = "–ù–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"
                return CONFIRMATION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {e}")
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dialog."
                )
            return ConversationHandler.END

    @staticmethod
    async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        try:
            if update.callback_query:
                query = update.callback_query
                await query.answer()
                
                if query.data == "confirmation_yes":
                    name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                    keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ñ–¥–µ–º –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                        reply_markup=reply_markup
                    )
                    context.user_data['confirmation'] = "–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                else:
                    name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                    keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        f"–ü–æ–Ω—è–ª, —Ç–æ–≥–¥–∞ —Ö–æ—á—É –ø–æ–∂–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                        reply_markup=reply_markup
                    )
                    context.user_data['confirmation'] = "–ù–µ—Ç, –æ—Ç–º–µ–Ω–µ–Ω–æ"
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                context.user_data['preferred_time'] = update.message.text
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ, {name}! –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                    reply_markup=reply_markup
                )
                context.user_data['confirmation'] = "–î–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            DialogHandlers.save_candidate_data(context)
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            message = (update.callback_query.message if update.callback_query else update.message)
            if message:
                keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dialog.",
                    reply_markup=reply_markup
                )
            return ConversationHandler.END

    @staticmethod
    def save_candidate_data(context):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            name = context.user_data.get('candidate_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            interest = context.user_data.get('interest', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            invitation = context.user_data.get('invitation_accepted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            confirmation = context.user_data.get('confirmation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            preferred_time = context.user_data.get('preferred_time', '')
            start_time = context.user_data.get('dialog_start_time', datetime.now().isoformat())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏—é (–ø–æ–∫–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏–∑ —Å–ø–∏—Å–∫–∞)
            vacancies = DataStorage.get_vacancies()
            vacancy_id = context.user_data.get('vacancy_id', 0)
            if 0 <= vacancy_id < len(vacancies):
                vacancy_title = vacancies[vacancy_id]['title']
            else:
                vacancy_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è"
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if confirmation == "–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" or confirmation == "–î–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è":
                status = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
            elif interest == "–ù–µ—Ç, –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω":
                status = "–û—Ç–∫–∞–∑–∞–ª—Å—è"
            else:
                status = "–û–±–¥—É–º—ã–≤–∞–µ—Ç"
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate_data = {
                'name': name,
                'vacancy': vacancy_title,
                'status': status,
                'date': start_time,
                'interest': interest,
                'invitation': invitation,
                'confirmation': confirmation,
                'preferred_time': preferred_time
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            DataStorage.add_candidate(candidate_data)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {name} ({vacancy_title})")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            for key in list(context.user_data.keys()):
                if key.startswith(('candidate_', 'dialog_', 'interest', 'invitation', 'confirmation', 'preferred_time', 'vacancy_id')):
                    del context.user_data[key]
                    
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            return False

    @staticmethod
    async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "back_to_intro":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é
                intro_message = DIALOG_SCRIPTS[INTRO].format(company=COMPANY_NAME)
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="intro_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="intro_no")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(intro_message, reply_markup=reply_markup)
                return INTRO
            
            elif query.data == "back_to_research":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                research_message = DIALOG_SCRIPTS[RESEARCH].format(name=name)
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_intro")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(research_message, reply_markup=reply_markup)
                return PRESENTATION
                
            elif query.data == "back_to_presentation":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                presentation_message = DIALOG_SCRIPTS[PRESENTATION].format(name=name)
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="presentation_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="presentation_no")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_research")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(presentation_message, reply_markup=reply_markup)
                return INVITATION
                
            elif query.data == "back_to_invitation":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                name = context.user_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                invitation_message = DIALOG_SCRIPTS[INVITATION].format(name=name)
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="invitation_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", callback_data="invitation_no")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_presentation")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(invitation_message, reply_markup=reply_markup)
                return INVITATION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
            return ConversationHandler.END 